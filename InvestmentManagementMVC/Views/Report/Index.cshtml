<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report API - CRUD Operations</title>
</head>
<body>
    <h1>Report Management - CRUD Operations</h1>

    <!-- Add or Update Report Form -->
    <h2>Add or Update Report Form</h2>
    <form id="ReportForm">
        <label for="reportId">Report ID:</label>
        <input type="number" id="reportId" name="reportId" required><br><br>

        <label for="portfolioId">Portfolio ID:</label>
        <input type="number" id="portfolioId" name="portfolioId" required><br><br>

        <label for="reportType">Report Type:</label>
        <input type="text" id="reportType" name="reportType" required><br><br>

        <label for="reportDate">Report Date:</label>
        <input type="date" id="reportDate" name="reportDate" required><br><br>

        <!-- Buttons for POST, PUT, and DELETE operations -->
        <button type="button" onclick="sendRequest('POST')">Add Report (POST)</button>
        <button type="button" onclick="sendRequest('PUT')">Update Report (PUT)</button>
        <button type="button" onclick="deleteReport()">Delete Report</button>
    </form>
    <label id="responseMessage" style="color: green;"></label>

    <!-- View All Reports -->
    <h2>View All Reports</h2>
    <button type="button" onclick="fetchAllReports()">Get All Reports</button>
    <div id="reportsList"></div>

    <script>
        const apiUrl = 'https://localhost:7269/api/Reports';

        // Function to display messages
        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        // Function to send POST/PUT requests
        function sendRequest(method) {
            const reportId = document.getElementById("reportId").value;
            const portfolioId = document.getElementById("portfolioId").value;
            const reportType = document.getElementById("reportType").value;
            const reportDate = document.getElementById("reportDate").value;

            if (!reportId || !portfolioId || !reportType || !reportDate) {
                displayMessage("All fields are required!", true);
                return;
            }

            const data = {
                reportId: parseInt(reportId),
                portfolioId: parseInt(portfolioId),
                reportType: reportType,
                reportDate: reportDate
            };

            const endpoint = method === 'PUT' ? `${apiUrl}/${reportId}` : apiUrl;

            fetch(endpoint, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(response => {

                if (response.status === 204) {
                    displayMessage(`${method} Success: No content returned`);
                    return {};
                }
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (method === 'PUT') {
                    // Display the updated report data in the message
                    displayMessage(`PUT Success: Updated Report - ID: ${data.reportId}, Type: ${data.reportType}, Date: ${new Date(data.reportDate).toLocaleDateString()}`);
                    fetchAllReports(); // Refresh the list of reports
                } else {
                    displayMessage(`${method} Success: ${JSON.stringify(data)}`);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            });
        }

        // Function to delete a report
        function deleteReport() {
            const reportId = document.getElementById("reportId").value;
            if (!reportId) {
                displayMessage("Please enter a report ID to delete", true);
                return;
            }

            fetch(`${apiUrl}/${reportId}`, { method: 'DELETE' })
            .then(response => {
                if (response.status === 204) {
                    displayMessage(`DELETE Success: Report ID ${reportId} deleted`);
                    fetchAllReports(); // Refresh the list of reports
                    return;
                }
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .catch(error => {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            });
        }

        // Function to fetch and display all reports
        function fetchAllReports() {
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Request failed with status ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => displayReports(data))
                .catch(error => {
                    console.error('Error:', error);
                    displayMessage(`Error: ${error.message}`, true);
                });
        }

        // Function to display reports
        function displayReports(reports) {
            const reportsList = document.getElementById("reportsList");
            reportsList.innerHTML = "<h3>Reports:</h3>";
            reportsList.innerHTML += reports.map(report => `
                <div>
                    <p><b>Report ID:</b> ${report.reportId}</p>
                    <p><b>Portfolio ID:</b> ${report.portfolioId}</p>
                    <p><b>Report Type:</b> ${report.reportType}</p>
                    <p><b>Report Date:</b> ${new Date(report.reportDate).toLocaleDateString()}</p>
                    <hr>
                </div>
            `).join('');
        }
    </script>
</body>
</html>
