@*@{
        ViewBag.Title = "Home Page";
    }

    <main>
        <section class="row" aria-labelledby="aspnetTitle">
            <h1 id="title">ASP.NET</h1>
            <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
            <p><a href="https://asp.net" class="btn btn-primary btn-md">Learn more &raquo;</a></p>
        </section>

        <div class="row">
            <section class="col-md-4" aria-labelledby="gettingStartedTitle">
                <h2 id="gettingStartedTitle">Getting started</h2>
                <p>
                    ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that
                    enables a clean separation of concerns and gives you full control over markup
                    for enjoyable, agile development.
                </p>
                <p><a class="btn btn-outline-dark" href="https://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
            </section>
            <section class="col-md-4" aria-labelledby="librariesTitle">
                <h2 id="librariesTitle">Get more libraries</h2>
                <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
                <p><a class="btn btn-outline-dark" href="https://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>
            </section>
            <section class="col-md-4" aria-labelledby="hostingTitle">
                <h2 id="hostingTitle">Web Hosting</h2>
                <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
                <p><a class="btn btn-outline-dark" href="https://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>
            </section>
        </div>
    </main>*@

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio API - POST and PUT Methods</title>
</head>
<body>
    <h1>Portfolio API - Add and Update</h1>

    <!-- Form for Adding/Updating Portfolio -->
    <form id="portfolioForm">
        <label for="portfolioId">Portfolio ID:</label>
        <input type="number" id="portfolioId" name="portfolioId" required><br><br>

        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="userId">User ID:</label>
        <input type="number" id="userId" name="userId" required><br><br>

        <label for="description">Description:</label>
        <textarea id="description" name="description" required></textarea><br><br>

        <label for="totalValue">Total Value:</label>
        <input type="number" id="totalValue" name="totalValue" step="0.01" required><br><br>

        <!-- Buttons for POST and PUT operations -->
        <button type="button" onclick="sendRequest('POST')">Add Portfolio (POST)</button>
        <button type="button" onclick="sendRequest('PUT')">Update Portfolio (PUT)</button>
    </form>

    <label id="responseMessage" style="color: green;"></label>

    <script>
        const apiUrl = 'https://localhost:7269/api/Portfolios';

        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        // Function to handle POST and PUT requests
        async function sendRequest(method) {
            const portfolioId = document.getElementById("portfolioId").value;
            const name = document.getElementById("name").value;
            const userId = document.getElementById("userId").value;
            const description = document.getElementById("description").value;
            const totalValue = document.getElementById("totalValue").value;

            const data = {
                portfolioId: parseInt(portfolioId),P
                name: name,
                userId: parseInt(userId),
                description: description,
                totalValue: parseFloat(totalValue)
            };

            const url = method === 'PUT' ? `${apiUrl}/${portfolioId}` : apiUrl;

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }

                const result = await response.json();
                displayMessage(`${method} Success: ${JSON.stringify(result)}`);
            } catch (error) {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            }
        }
    </script>
</body>
</html>
