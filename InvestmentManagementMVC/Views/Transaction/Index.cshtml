<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transaction Management - CRUD Operations</title>
</head>
<body>
    <h1>Transaction Management - CRUD Operations</h1>

    <!-- Add or Update Transaction Form -->
    <h2>Add or Update Transaction Form</h2>
    <form id="TransactionForm">
        <label for="transactionId">Transaction ID:</label>
        <input type="number" id="transactionId" name="transactionId" required><br><br>

        <label for="assetId">Asset ID:</label>
        <input type="number" id="assetId" name="assetId" required><br><br>

        <label for="transactionType">Transaction Type:</label>
        <input type="text" id="transactionType" name="transactionType" placeholder="e.g., Buy/Sell" required><br><br>

        <label for="amount">Amount:</label>
        <input type="number" step="0.01" id="amount" name="amount" required><br><br>

        <label for="transactionDate">Transaction Date:</label>
        <input type="date" id="transactionDate" name="transactionDate" required><br><br>

        <!-- Buttons for POST, PUT, and DELETE operations -->
        <button type="button" onclick="sendRequest('POST')">Add Transaction (POST)</button>
        <button type="button" onclick="sendRequest('PUT')">Update Transaction (PUT)</button>
        <button type="button" onclick="deleteTransaction()">Delete Transaction</button>
    </form>
    <label id="responseMessage" style="color: green;"></label>

    <!-- View All Transactions -->
    <h2>View All Transactions</h2>
    <button type="button" onclick="fetchAllTransactions()">Get All Transactions</button>
    <div id="transactionsList"></div>

    <script>
        const apiUrl = 'https://localhost:7269/api/Transactions';

        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        function sendRequest(method) {
            const transactionId = document.getElementById("transactionId").value;
            const assetId = document.getElementById("assetId").value;
            const transactionType = document.getElementById("transactionType").value;
            const amount = document.getElementById("amount").value;
            const transactionDate = document.getElementById("transactionDate").value;

            if (!transactionId || !assetId || !transactionType || !amount || !transactionDate) {
                displayMessage("All fields are required!", true);
                return;
            }

            const data = {
                transactionId: parseInt(transactionId),
                assetId: parseInt(assetId),
                transactionType: transactionType,
                amount: parseFloat(amount),
                transactionDate: transactionDate
            };

            const endpoint = method === 'PUT' ? `${apiUrl}/${transactionId}` : apiUrl;

            fetch(endpoint, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (response.status === 204) {
                    displayMessage(`${method} Success: No content returned`);
                    return {};
                }
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                displayMessage(`${method} Success: ${JSON.stringify(data)}`);
                fetchAllTransactions();
            })
            .catch(error => {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            });
        }

        function deleteTransaction() {
            const transactionId = document.getElementById("transactionId").value;
            if (!transactionId) {
                displayMessage("Please enter a Transaction ID to delete", true);
                return;
            }

            fetch(`${apiUrl}/${transactionId}`, { method: 'DELETE' })
            .then(response => {
                if (response.status === 204) {
                    displayMessage(`DELETE Success: Transaction ID ${transactionId} deleted`);
                    fetchAllTransactions();
                    return;
                }
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .catch(error => {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            });
        }

        function fetchAllTransactions() {
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Request failed with status ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => displayTransactions(data))
                .catch(error => {
                    console.error('Error:', error);
                    displayMessage(`Error: ${error.message}`, true);
                });
        }

        function displayTransactions(transactions) {
            const transactionsList = document.getElementById("transactionsList");
            transactionsList.innerHTML = "<h3>Transactions:</h3>";
            transactionsList.innerHTML += transactions.map(transaction => `
                <div>
                    <p><b>Transaction ID:</b> ${transaction.transactionId}</p>
                    <p><b>Asset ID:</b> ${transaction.assetId}</p>
                    <p><b>Transaction Type:</b> ${transaction.transactionType}</p>
                    <p><b>Amount:</b> ${transaction.amount}</p>
                    <p><b>Transaction Date:</b> ${new Date(transaction.transactionDate).toLocaleDateString()}</p>
                    <hr>
                </div>
            `).join('');
        }
    </script>
</body>
</html>
