<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Role Management - CRUD Operations</title>
</head>
<body>
    <h1>Role Management - CRUD Operations</h1>

    <!-- Add or Update Role Form -->
    <h2>Add or Update Role Form</h2>
    <form id="RoleForm">
        <label for="roleId">Role ID:</label>
        <input type="number" id="roleId" name="roleId" required><br><br>

        <label for="roleName">Role Name:</label>
        <input type="text" id="roleName" name="roleName" required><br><br>

        <!-- Buttons for POST, PUT, and DELETE operations -->
        <button type="button" onclick="sendRequest('POST')">Add Role (POST)</button>
        <button type="button" onclick="sendRequest('PUT')">Update Role (PUT)</button>
        <button type="button" onclick="deleteRole()">Delete Role</button>
    </form>
    <label id="responseMessage" style="color: green;"></label>

    <!-- View All Roles -->
    <h2>View All Roles</h2>
    <button type="button" onclick="fetchAllRoles()">Get All Roles</button>
    <div id="rolesList"></div>

    <script>
        const apiUrl = 'https://localhost:7269/api/Roles';

        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        function sendRequest(method) {
            const roleId = document.getElementById("roleId").value;
            const roleName = document.getElementById("roleName").value;

            if (!roleId || !roleName) {
                displayMessage("All fields are required!", true);
                return;
            }

            const data = {
                roleId: parseInt(roleId),
                roleName: roleName
            };

            const endpoint = method === 'PUT' ? `${apiUrl}/${roleId}` : apiUrl;

            fetch(endpoint, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (response.status === 204) {
                    displayMessage(`${method} Success: No content returned`);
                    return {};
                }
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                displayMessage(`${method} Success: ${JSON.stringify(data)}`);
                fetchAllRoles();
            })
            .catch(error => {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            });
        }

        function deleteRole() {
            const roleId = document.getElementById("roleId").value;
            if (!roleId) {
                displayMessage("Please enter a Role ID to delete", true);
                return;
            }

            fetch(`${apiUrl}/${roleId}`, { method: 'DELETE' })
            .then(response => {
                if (response.status === 204) {
                    displayMessage(`DELETE Success: Role ID ${roleId} deleted`);
                    fetchAllRoles();
                    return;
                }
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .catch(error => {
                console.error('Error:', error);
                displayMessage(`Error: ${error.message}`, true);
            });
        }

        function fetchAllRoles() {
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Request failed with status ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => displayRoles(data))
                .catch(error => {
                    console.error('Error:', error);
                    displayMessage(`Error: ${error.message}`, true);
                });
        }

        function displayRoles(roles) {
            const rolesList = document.getElementById("rolesList");
            rolesList.innerHTML = "<h3>Roles:</h3>";
            rolesList.innerHTML += roles.map(role => `
                <div>
                    <p><b>Role ID:</b> ${role.roleId}</p>
                    <p><b>Role Name:</b> ${role.roleName}</p>
                    <hr>
                </div>
            `).join('');
        }
    </script>
</body>
</html>
